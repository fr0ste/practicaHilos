/**
 *
 * Autor: Figueroa Martinez Joel Francisco
 * Fecha creacion: 08/12/2022
 * Fecha modificacion: 13/12/2022
 * Descripcion: 
 * 
 */
package view;

import entity.Ball;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.event.MouseInputListener;

public class PanelGrafico extends javax.swing.JPanel implements Runnable, KeyListener, MouseInputListener, MouseMotionListener {

    private ImageIcon fondo;
    private ArrayList<Ball> balls = new ArrayList<>();

    public PanelGrafico() {
        initComponents();

        this.addMouseListener(this);
        this.addMouseMotionListener(this);
        this.setBounds(0, 0, 300, 300);
        this.setBackground(Color.MAGENTA);
        this.setSize(500, 300);

        createBalls(3);

        this.addKeyListener(this); //agregar escucha al panel con los teclados
        this.setFocusable(true);

    }

    @Override
    public void paint(Graphics g) {

        Dimension tamanio = this.getSize();
        fondo = new ImageIcon(getClass().getResource("../img/background.jpg"));
        g.drawImage(fondo.getImage(), 0, 0, tamanio.width, tamanio.height, null);
        setOpaque(false);

        super.paint(g);
        Graphics2D g2d = (Graphics2D) g;

        paintBalls(g2d);

        Thread hilo = new Thread(this);
        hilo.start();
        try {
            Thread.sleep(15);
        } catch (InterruptedException ex) {
            Logger.getLogger(PanelGrafico.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(0, 0, 0));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void run() {
        moveBalls(balls);
        repaint();
    }

    @Override
    public void keyTyped(KeyEvent ke) {

    }

    @Override
    public void keyPressed(KeyEvent ke) {
        int codigo = ke.getExtendedKeyCode();

        if (codigo == ke.VK_UP) {
            System.out.println("flecha arriba");

        }

        if (codigo == ke.VK_DOWN) {
            System.out.println("flecha abajo");

        }

        if (codigo == ke.VK_LEFT) {
            System.out.println("flecha izquierda");

        }

        if (codigo == ke.VK_RIGHT) {
            System.out.println("flecha derecha");

        }

    }

    @Override
    public void keyReleased(KeyEvent ke) {

    }

    @Override
    public void mouseClicked(MouseEvent me) {

    }

    @Override
    public void mousePressed(MouseEvent me) {

    }

    @Override
    public void mouseReleased(MouseEvent me) {

    }

    @Override
    public void mouseEntered(MouseEvent me) {

    }

    @Override
    public void mouseExited(MouseEvent me) {

    }

    @Override
    public void mouseDragged(MouseEvent me) {

    }

    @Override
    public void mouseMoved(MouseEvent me) {

    }

    private void createBalls(int numberBalls) {
        for (int j = 0; j < numberBalls; j++) {
            balls.add(new Ball(this, (int) (Math.random() * (this.getWidth()-30)),
                     (int) (Math.random() * (this.getHeight()-30)),
                    new Color((int) ((Math.random() * 255)), (int) (Math.random() * 255), (int) (Math.random() * 255))));
        }
    }

    private void paintBalls(Graphics2D g2d) {
        for (Ball ball : balls) {
            ball.paint(g2d);
        }
    }

    private void moveBalls(ArrayList<Ball> balls) {
        for (int i = 0; i < balls.size(); i++) {
            for (int j = i + 1; j < balls.size(); j++) {
                balls.get(i).collision(balls.get(j));
            }
            balls.get(i).move();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
